import org.apache.tools.ant.filters.ReplaceTokens

buildscript{
	ext {
		springBootVer = '2.4.5'
//		querydslVer = '4.4.0'
		querydslVer = '5.0.0'
		querydslPluginVer = '1.0.10'
		springDependencyMgmtVer = '1.0.11'
		springLoadedVer = '1.2.8'
		nodePluginVer = '1.3.1'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
		classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
		classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
		classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"

	}
}

plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'com.github.node-gradle.node'

group = 'com.gamul'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	providedRuntime
//	compileOnly {
//		extendsFrom annotationProcessor
//	}
}

node {
	download = true
	version = '14.17.0'
	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/../front")
}

def buildTime() {
	def date = new Date()
	def formattedDate = date.format('yyyyMMdd_HHmm')
	return formattedDate
}

project.ext.set("build.date", buildTime())

processResources {
	with copySpec {
		from "src/main/resources"
		include "**/application*.yml"
		include "**/application*.yaml"
		include "**/application*.properties"
		project.properties.findAll().each {
			prop ->
				if (prop.value != null) {
					filter(ReplaceTokens, tokens: [ (prop.key): String.valueOf(prop.value)])
					filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
					filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
				}
		}
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url "https://repo.spring.io/libs-release" }
	maven { url "https://repo.maven.apache.org/maven2" }
	maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation('commons-io:commons-io:2.6')
	implementation("org.apache.commons:commons-collections4:4.4")
	implementation("org.apache.commons:commons-lang3:3.9")

	implementation("com.querydsl:querydsl-jpa:${querydslVer}")
	implementation("com.querydsl:querydsl-apt:${querydslVer}")

	//Json
	implementation('org.json:json:20210307')
	implementation'com.google.code.gson:gson:2.8.7'

	//view
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.webjars.bower:bootstrap:4.3.1'
	implementation 'org.webjars.bower:vue:2.5.16'
	implementation 'org.webjars.bower:axios:0.17.1'
	implementation 'com.google.code.gson:gson:2.8.0'

	//IntelliJ용
	//IntelliJ에서는 하기 annotationProcessor를 쓰면 별도의 querydsl 플러그인 및 플러그인 설정이 불필요.
//	annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jpa")

	// QueryDSL
	implementation "com.querydsl:querydsl-jpa:${querydslVer}"
	annotationProcessor(
			"javax.persistence:javax.persistence-api",
			"javax.annotation:javax.annotation-api",
			"com.querydsl:querydsl-apt:${querydslVer}:jpa")

	implementation("com.squareup.retrofit2:retrofit:2.7.1")
	implementation("com.squareup.retrofit2:converter-jackson:2.7.1")
	implementation("com.squareup.okhttp3:logging-interceptor:3.9.0")

	implementation("com.google.guava:guava:29.0-jre")
	annotationProcessor("com.google.guava:guava:29.0-jre")

	testImplementation("com.jayway.jsonpath:json-path:2.4.0")

	implementation("com.auth0:java-jwt:3.10.3")

	implementation("io.springfox:springfox-swagger2:3.0.0")
	implementation("io.springfox:springfox-swagger-ui:3.0.0")
	implementation("io.springfox:springfox-data-rest:3.0.0")
	implementation("io.springfox:springfox-bean-validators:3.0.0")
	implementation("io.springfox:springfox-boot-starter:3.0.0")

//	compile("javax.annotation:javax.annotation-api:1.2")

	implementation("org.projectlombok:lombok:1.18.20")
	annotationProcessor("org.projectlombok:lombok:1.18.20")
}

tasks {
	processResources {
		duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// querydsl 세팅 시작
def querydslDir = 'src/main/generated'
querydsl {
	library = "com.querydsl:querydsl-apt"
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	querydsl.extendsFrom compileClasspath
}

//compileQuerydsl.doFirst {
//	if(file(querydslDir).exists() )
//		delete(file(querydslDir))
//}
// querydsl 세팅 끝
